# generated by fastapi-codegen:
#   filename:  openapi.yml
#   timestamp: 2023-05-21T04:06:58+00:00

from __future__ import annotations

from fastapi import FastAPI
from infra.database import SessionLocal
from interface.handler import *
from interface.handler.dto import *

app = FastAPI(
    title='API Title',
    version='1.0',
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    servers=[{'url': 'http://localhost:8000'}],
)


# NOTE: must import dependency after database
from dependency import Dependency  # type: ignore # noqa

injector = Dependency(db=SessionLocal())  # DI container


@app.get('/affiliates', response_model=None, tags=['Affiliate'])
async def get_affiliates() -> None:
    h = injector.resolve(AffiliateHandler)
    return h.get_affiliates()


@app.post('/affiliates', response_model=None, tags=['Affiliate'])
async def post_affiliates() -> None:
    h = injector.resolve(AffiliateHandler)
    return h.post_affiliates()


@app.get('/affiliates/{affiliate_id}', response_model=None, tags=['Affiliate'])
async def get_affiliates_affiliate_id() -> None:
    h = injector.resolve(AffiliateHandler)
    return h.get_affiliates_affiliate_id()


@app.put('/affiliates/{affiliate_id}', response_model=None, tags=['Affiliate'])
async def put_affiliates_affiliate_id() -> None:
    h = injector.resolve(AffiliateHandler)
    return h.put_affiliates_affiliate_id()


@app.delete('/affiliates/{affiliate_id}', response_model=None, tags=['Affiliate'])
async def delete_affiliates_affiliate_id() -> None:
    h = injector.resolve(AffiliateHandler)
    return h.delete_affiliates_affiliate_id()


@app.get('/items', response_model=None, tags=['Item'])
async def get_items() -> None:
    h = injector.resolve(ItemHandler)
    return h.get_items()


@app.post('/items', response_model=None, tags=['Item'])
async def post_items() -> None:
    h = injector.resolve(ItemHandler)
    return h.post_items()


@app.get('/items/{item_id}', response_model=None, tags=['Item'])
async def get_items_item_id() -> None:
    h = injector.resolve(ItemHandler)
    return h.get_items_item_id()


@app.put('/items/{item_id}', response_model=None, tags=['Item'])
async def put_items_item_id() -> None:
    h = injector.resolve(ItemHandler)
    return h.put_items_item_id()


@app.delete('/items/{item_id}', response_model=None, tags=['Item'])
async def delete_items_item_id() -> None:
    h = injector.resolve(ItemHandler)
    return h.delete_items_item_id()


@app.get('/orders', response_model=None, tags=['Order'])
async def get_orders() -> None:
    h = injector.resolve(OrderHandler)
    return h.get_orders()


@app.post('/orders', response_model=None, tags=['Order'])
async def post_orders() -> None:
    h = injector.resolve(OrderHandler)
    return h.post_orders()


@app.get('/orders/{order_id}', response_model=None, tags=['Order'])
async def get_orders_order_id() -> None:
    h = injector.resolve(OrderHandler)
    return h.get_orders_order_id()


@app.put('/orders/{order_id}', response_model=None, tags=['Order'])
async def put_orders_order_id() -> None:
    h = injector.resolve(OrderHandler)
    return h.put_orders_order_id()


@app.delete('/orders/{order_id}', response_model=None, tags=['Order'])
async def delete_orders_order_id() -> None:
    h = injector.resolve(OrderHandler)
    return h.delete_orders_order_id()


@app.get('/orders/{order_id}/items', response_model=None, tags=['OrderItem'])
async def get_orders_order_id_items() -> None:
    h = injector.resolve(OrderItemHandler)
    return h.get_orders_order_id_items()


@app.post('/orders/{order_id}/items', response_model=None, tags=['OrderItem'])
async def post_orders_order_id_items() -> None:
    h = injector.resolve(OrderItemHandler)
    return h.post_orders_order_id_items()


@app.get(
    '/orders/{order_id}/items/{order_item_id}', response_model=None, tags=['OrderItem']
)
async def get_orders_order_id_items_order_item_id() -> None:
    h = injector.resolve(OrderItemHandler)
    return h.get_orders_order_id_items_order_item_id()


@app.put(
    '/orders/{order_id}/items/{order_item_id}', response_model=None, tags=['OrderItem']
)
async def put_orders_order_id_items_order_item_id() -> None:
    h = injector.resolve(OrderItemHandler)
    return h.put_orders_order_id_items_order_item_id()


@app.delete(
    '/orders/{order_id}/items/{order_item_id}', response_model=None, tags=['OrderItem']
)
async def delete_orders_order_id_items_order_item_id() -> None:
    h = injector.resolve(OrderItemHandler)
    return h.delete_orders_order_id_items_order_item_id()


@app.get('/purchase_rights', response_model=None, tags=['PurchaseRight'])
async def get_purchase_rights() -> None:
    h = injector.resolve(PurchaseRightHandler)
    return h.get_purchase_rights()


@app.post('/purchase_rights', response_model=None, tags=['PurchaseRight'])
async def post_purchase_rights() -> None:
    h = injector.resolve(PurchaseRightHandler)
    return h.post_purchase_rights()


@app.get(
    '/purchase_rights/{purchase_right_id}', response_model=None, tags=['PurchaseRight']
)
async def get_purchase_rights_purchase_right_id() -> None:
    h = injector.resolve(PurchaseRightHandler)
    return h.get_purchase_rights_purchase_right_id()


@app.put(
    '/purchase_rights/{purchase_right_id}', response_model=None, tags=['PurchaseRight']
)
async def put_purchase_rights_purchase_right_id() -> None:
    h = injector.resolve(PurchaseRightHandler)
    return h.put_purchase_rights_purchase_right_id()


@app.delete(
    '/purchase_rights/{purchase_right_id}', response_model=None, tags=['PurchaseRight']
)
async def delete_purchase_rights_purchase_right_id() -> None:
    h = injector.resolve(PurchaseRightHandler)
    return h.delete_purchase_rights_purchase_right_id()


@app.get('/users', response_model=None, tags=['User'])
async def get_users() -> None:
    h = injector.resolve(UserHandler)
    return h.get_users()


@app.post('/users', response_model=None, tags=['User'])
async def post_users() -> None:
    h = injector.resolve(UserHandler)
    return h.post_users()


@app.get('/users/{user_id}', response_model=None, tags=['User'])
async def get_users_user_id() -> None:
    h = injector.resolve(UserHandler)
    return h.get_users_user_id()


@app.put('/users/{user_id}', response_model=None, tags=['User'])
async def put_users_user_id() -> None:
    h = injector.resolve(UserHandler)
    return h.put_users_user_id()


@app.delete('/users/{user_id}', response_model=None, tags=['User'])
async def delete_users_user_id() -> None:
    h = injector.resolve(UserHandler)
    return h.delete_users_user_id()
